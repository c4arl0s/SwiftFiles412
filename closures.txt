In the article Swift functions, we created a function using func keyword. However, there is another special type of function in Swift, known as closures that can be defined without using keyword func and a function name.

Like functions, closures can accept parameters and return values. 
It also contains a set of statements which executes after you call it and can be assigned to a variable/constant as functions.

Closures are mainly used for two reasons:

- Completion blocks: Closures help you to be notified when some task has finished its execution. See Closure as a completion handler to learn more about it.

	Higher order functions
- Closures can be passed as an input parameters for higher order functions. 
- A higher order function is just a type of function that accepts function as an input and returns value of type function as output.
	
For this purpose it's better to use closures in replacement of function because closure omits the func keyword and function name that makes the code more readable and short.

At first glance, a closure is simply a function defined within another function. However, the power of closures is derived from the fact that the inner function remembers the environment in which it was created. In other words, the inner function has access to the outer function's variables and parameters.
