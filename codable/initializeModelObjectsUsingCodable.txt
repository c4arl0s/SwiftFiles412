what have you done ?
- performe the request
- decoding JSON data into native swift types you have a dictionary [String:String]
- now you have to convert the dictionary into a PhotoInfo object that you can use thoughout your project.

Codable protocol defines a set of rules that can be applied to a clas or structure that allow you to easily convert data from one to another.

in this case JSONDecoder class can be used to translate information from JSON into your custom model objects.

- encoders and decoders work with Codable types
- init(with:) which is used to initialize the new type of data from the old data
- decode(to:) which is used to convert the current type to a new type of data.
- by default, the Codable protocol matches property names and values with the keys and values of the encoded type. HOwever, in this case you have keys in your JSON data that differ from the names of your properties, which will require you to implement custome keys.
- to map non-matching keys to your properties you need to declare a nested enumeration named CodingKeys that conforms to the CodingKey protocol inside your object. 

Example: 

struct Report: Codable {
	let creationDate: Date
	let profileID: String
	let readCount: Int

	enum CodingKeys: String, CodingKey {
		case creationDate = "report_date"
		case profileID = "profile_id"
		case readCount = "read_count"
	}
}

the JSON data also contains key/value pairs for date, service version, and media type that PhotoInfo does not use. By Default, encoders and decoders that work with Codable objects require that each key or property have a counterpart. To override this, you will need to create your won implementation of the init(from:) method.

Start with the custom keys. The map non-matching keys to your properties you need to declare anested enumeration inside your object named CodingKeys that conforms to the CodingKey protocol.
Each case should correspond to a property and have the same as the property. If the property name and the name of the key in the data differ, you will need to assign an associate String to the case where the value is the same as the key name in the data.

For example: PhotoInfo has a property called description that should map to the NASA APOD API explanation key. Your enum should includ a case for description that is set equal to "explanation". The keys that match do not need an associated value. When finished, your enumeration should look something like the following:

enum CodingKeys: String, CodingKey {
	case title
	case description = "explanation"
	case url
	case copyright
}

while you are one step closer to being able to decode your JSON data to a PhotoInfo object, you still need to implement your own version of init(from:) that ignores the extrangeous key/value pairs in the data that PhotoInfo will not include. Start by declaring an initializer inside of PhotoInfo as follows:

init(from decoder: Decoder) throws {
}

the throws keyword indicates that this initializer is a throwing function. This initializer will not be called by you directly, but by the Decoder that you use to decode your JSON data, so errors will be handle by the Decoder object or passed along when you call the decode(_:from:) method.

Inside the initializer, you need to access the JSON dataÂ´s key/value pairs through decoder. You first do this by accessing a KeyedCodingContainer, which acts much like a dictionary. Do this with the code let valueContainer = try decoder.container(keyedBy: CodingKeys.self). This wil return a KeyedCodingContainer that only contaiuns the key/value pairs associated with the cases declared in CodingKeys.

Once you have done this, you can use the decode(_:from:) method provided by the KeyedCodingContainer object to get each of the values corresponding to the keys you want and assign them to the correct properties. For example: you could type self.title = try values.decode(String.self, forkey: CodingKeys.title). Do this for all fo the properties. You Should end up with an initializer that looks like the following:

init(from decoder: Decoder) throws {
	let valueContainer = try decoder.container(keyedBy: CodingKeys.self)
	self.title = try valueContainer.decode(String.self, forKey: CodingKeys.title)
	self.description = try valueContainer.decode(String.self, forKey: CodingKeys.description)
	self.url = try valueContainer.decode(URL.self, forkey: CodingKeys.url)
	self.copyright = try? valueContainer.decode(String.self, forKey: CodingKeys.copyright)
}

Altogether, your PhotoInfo object should include its properties, an enumeration called CodingKeys, and an initializer called init(from:). It should look like this:

struct PhotoInfo: Codable {
	var title: String
	var description: String
	var url: URL
	var copyright: String?

	enum CodingKeys: String, CodingKey {
		case title
		case description = "explanation"
		case url
		case copyright
	}
	init(from decoder: Decoder) throws {
		let valueContainer = try decoder.container(keyedBy: CodingKeys.self)
		self.title = try valueContainer.decode(String.self, forKey: CodingKeys.description)
		self.description = try valueContainer.decode(String.self, forKey: CodingKeys.description)
		self.url = try valueContainer.decode(String.self, forKey:CodingKeys.copyright)
	}
}

	
			






