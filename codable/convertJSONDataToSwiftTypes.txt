Steps you do before:
- Access NASA APOD API
- Check for a response
- convert the response body to string
- print the string

what is next ? use JSONDecoder to convert the response to native Swift types.

CONVERT JSON DATA TO SWIFT TYPES

- Instances of JSONDecoder have a decode(_:from:) method
- JSONDecoder accepts parameters of type Type
- JSONDecoder accepts another parameter of type Data.

JSONDecoder's decode () method is considered a throwing function, which you have encountered before. Remember that by the pairing a throwing function with the do-try-catch syntax, you can capture and address each specific error that the mothod can throw.

More simply, if you procede a throwing function with try?, the function will return an optional value.
tthe function will return an optional value, If there is no error, the optional will hold the expected value, if there is an error, the optional will be nil.

in your playground, use JSONDecoder to decode the data returned to you frm the API into dictionary [String:String]. Since String already conforms to Codable, you do not need to do anything special involving Codable. 

let task = URLSession.shared.dataTask(with: url) { (data, response, error) in
	if let data = data, 
					let photoDictionary = try? jsonDecoder.decode([String: String].self, from: data) {
			print(photoDictionary)
}
task.resume()

REMEMBER:
- String already conforms to Codable.
- JSONDecoder has a mapping that it can follow to convert from JSON with string values to a Swift dictionary with the keys of type String and values of type String.


